============================= test session starts =============================
platform win32 -- Python 3.9.9, pytest-7.2.0, pluggy-1.0.0
django: settings: OpenAlumni.settings_dev (from ini)
rootdir: C:\Users\hhoar\PycharmProjects\OpenAlumni\tests, configfile: pytest.ini
plugins: anyio-3.5.0, cov-4.0.0, django-4.5.2, web3-5.31.1
collected 15 items

test_api.py ..F                                                          [ 20%]
test_query.py F..F                                                       [ 46%]
test_api.py .                                                            [ 53%]
test_query.py .                                                          [ 60%]
test_scrapping.py .....F                                                 [100%]

================================== FAILURES ===================================
_________________________________ test_backup _________________________________

server = <rest_framework.test.APIClient object at 0x000001CD3BDAAFA0>
file = 'backup_test'

    @pytest.mark.django_db
    def test_backup(server,file="backup_test"):
    	assert Profil.objects.count()>0
    	assert Work.objects.count()>0
    	rc=call_api(server,"backup","command=save&file="+file)
    	assert not rc is None
    
    	rc=call_api(server,"raz","password="+RESET_PASSWORD+"&filter=all")
    	assert not "error" in rc
    	assert Profil.objects.count()==0
    	assert Work.objects.count()==0
    
>   	rc=call_api(server,"backup","command=load&file="+file)

test_api.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

server = <rest_framework.test.APIClient object at 0x000001CD3BDAAFA0>
url = '/backup/', params = 'command=load&file=backup_test', body = None
method = 'GET', status_must_be = 200

    def call_api(server,url, params="", body=None, method=None, status_must_be=200):
    	if not url.startswith("/"): url = "/" + url
    	if not url.endswith("/"): url = url+"/"
    	if method is None: method = "GET" if body is None else "POST"
    
    	response=None
    	if method == "GET": response = server.get("/api" + url + "?" + params)
    	if method == "POST": response = server.post("/api" + url + "?" + params, json=body)
    	if method == "DELETE": response = server.delete("/api" + url + "?" + params)
    
>   	assert response.status_code == status_must_be
E    assert 302 == 200
E     +  where 302 = <HttpResponseRedirect status_code=302, "text/html; charset=utf-8", url="http://testserver/api/reindex/">.status_code

test_api.py:26: AssertionError
---------------------------- Captured stdout call -----------------------------
0:10 : Enregistrement de la base dans backup_test.json
0:12 : Effacement de all
0:12 : Effacement des profils
0:13 : Effacement des utilisateurs
0:13 : Effacement des contributions
0:13 : Effacement des awards
0:13 : Effacement des oeuvres
0:16 : Effacement des contributions
0:17 : Effacement de la base termin√öe
0:17 : Effacement de la base
Loading 'backup_test' fixtures...
Checking 'C:\Users\hhoar\PycharmProjects\OpenAlumni\tests' for fixtures...
Installing json fixture 'backup_test' from 'C:\Users\hhoar\PycharmProjects\OpenAlumni\tests'.

Processed 1 object(s).
Processed 2 object(s).
Processed 3 object(s).
Processed 4 object(s).
Processed 5 object(s).
Processed 6 object(s).
Processed 7 object(s).
Processed 8 object(s).
Processed 9 object(s).
Processed 10 object(s).
Processed 11 object(s).
Processed 12 object(s).
Processed 13 object(s).
Processed 14 object(s).
Processed 15 object(s).
Processed 16 object(s).
Processed 17 object(s).
Processed 18 object(s).
Processed 19 object(s).
Processed 20 object(s).
Processed 21 object(s).
Processed 22 object(s).
Processed 23 object(s).
Processed 24 object(s).
Processed 25 object(s).
Processed 26 object(s).
Processed 27 object(s).
Processed 28 object(s).
Processed 29 object(s).
Processed 30 object(s).
Processed 31 object(s).
Processed 32 object(s).
Processed 33 object(s).
Processed 34 object(s).
Processed 35 object(s).
Processed 36 object(s).
Processed 37 object(s).
Processed 38 object(s).
Processed 39 object(s).
Processed 40 object(s).
Processed 41 object(s).
Processed 42 object(s).
Processed 43 object(s).
Processed 44 object(s).
Processed 45 object(s).
Processed 46 object(s).
Processed 47 object(s).
Processed 48 object(s).
Processed 49 object(s).
Processed 50 object(s).
Processed 51 object(s).
Processed 52 object(s).
Processed 53 object(s).
Processed 54 object(s).
Processed 55 object(s).
Processed 56 object(s).
Processed 57 object(s).
Processed 58 object(s).
Processed 59 object(s).
Processed 60 object(s).
Processed 61 object(s).
Processed 62 object(s).
Processed 63 object(s).
Processed 64 object(s).
Processed 65 object(s).
Processed 66 object(s).
Processed 67 object(s).
Processed 68 object(s).
Processed 69 object(s).
Processed 70 object(s).
Processed 71 object(s).
Processed 72 object(s).
Processed 73 object(s).
Processed 74 object(s).
Processed 75 object(s).
Processed 76 object(s).
Processed 77 object(s).
Processed 78 object(s).
Processed 79 object(s).
Processed 80 object(s).
Processed 81 object(s).
Processed 82 object(s).
Processed 83 object(s).
Processed 84 object(s).
Processed 85 object(s).
Processed 86 object(s).
Processed 87 object(s).
Processed 88 object(s).
Processed 89 object(s).
Processed 90 object(s).
Processed 91 object(s).
Processed 92 object(s).
Processed 93 object(s).
Processed 94 object(s).
Processed 95 object(s).
Processed 96 object(s).
Processed 97 object(s).
Processed 98 object(s).
Processed 99 object(s).
Processed 100 object(s).
Processed 101 object(s).
Processed 102 object(s).
Processed 103 object(s).
Processed 104 object(s).
Processed 105 object(s).
Processed 106 object(s).
Processed 107 object(s).
Processed 108 object(s).
Processed 109 object(s).
Processed 110 object(s).
Processed 111 object(s).
Processed 112 object(s).
Processed 113 object(s).
Processed 114 object(s).
Processed 115 object(s).
Processed 116 object(s).
Processed 117 object(s).
Processed 118 object(s).
Processed 119 object(s).
Processed 120 object(s).
Processed 121 object(s).
Processed 122 object(s).
Processed 123 object(s).
Processed 124 object(s).
Processed 125 object(s).
Processed 126 object(s).
Processed 127 object(s).
Processed 128 object(s).
Processed 129 object(s).
Processed 130 object(s).
Processed 131 object(s).
Processed 132 object(s).
Processed 133 object(s).
Processed 134 object(s).
Processed 135 object(s).
Processed 136 object(s).
Processed 137 object(s).
Processed 138 object(s).
Processed 139 object(s).
Processed 140 object(s).
Processed 141 object(s).
Processed 142 object(s).
Processed 143 object(s).
Processed 144 object(s).
Processed 145 object(s).
Processed 146 object(s).
Processed 147 object(s).
Processed 148 object(s).
Processed 149 object(s).
Processed 150 object(s).
Processed 151 object(s).
Processed 152 object(s).
Processed 153 object(s).
Processed 154 object(s).
Processed 155 object(s).
Processed 156 object(s).
Processed 157 object(s).
Processed 158 object(s).
Processed 159 object(s).
Processed 160 object(s).
Processed 161 object(s).
Processed 162 object(s).
Processed 163 object(s).
Processed 164 object(s).
Processed 165 object(s).
Processed 166 object(s).
Processed 167 object(s).
Processed 168 object(s).
Processed 169 object(s).
Processed 170 object(s).
Processed 171 object(s).
Processed 172 object(s).
Processed 173 object(s).
Processed 174 object(s).
Processed 175 object(s).
Processed 176 object(s).
Processed 177 object(s).
Processed 178 object(s).
Processed 179 object(s).
Processed 180 object(s).
Processed 181 object(s).
Processed 182 object(s).
Processed 183 object(s).
Processed 184 object(s).
Processed 185 object(s).
Processed 186 object(s).
Processed 187 object(s).
Processed 188 object(s).
Processed 189 object(s).
Processed 190 object(s).
Processed 191 object(s).
Processed 192 object(s).
Processed 193 object(s).
Processed 194 object(s).
Processed 195 object(s).
Processed 196 object(s).
Processed 197 object(s).
Processed 198 object(s).
Processed 199 object(s).
Processed 200 object(s).
Processed 201 object(s).
Processed 202 object(s).
Processed 203 object(s).
Processed 204 object(s).
Processed 205 object(s).
Processed 206 object(s).
Processed 207 object(s).
Processed 208 object(s).
Processed 209 object(s).
Processed 210 object(s).
Processed 211 object(s).
Processed 212 object(s).
Processed 213 object(s).
Processed 214 object(s).
Processed 215 object(s).
Processed 216 object(s).
Processed 217 object(s).
Processed 218 object(s).
Processed 219 object(s).
Processed 220 object(s).
Processed 221 object(s).
Processed 222 object(s).
Processed 223 object(s).
Processed 224 object(s).
Processed 225 object(s).
Processed 226 object(s).
Processed 227 object(s).
Processed 228 object(s).
Processed 229 object(s).
Processed 230 object(s).
Processed 231 object(s).
Processed 232 object(s).
Processed 233 object(s).
Processed 234 object(s).
Processed 235 object(s).
Processed 236 object(s).
Processed 237 object(s).
Processed 238 object(s).
Processed 239 object(s).
Processed 240 object(s).
Processed 241 object(s).
Processed 242 object(s).
Processed 243 object(s).
Processed 244 object(s).
Processed 245 object(s).
Processed 246 object(s).
Processed 247 object(s).
Processed 248 object(s).
Processed 249 object(s).
Processed 250 object(s).
Processed 251 object(s).
Processed 252 object(s).
Processed 253 object(s).
Processed 254 object(s).
Processed 255 object(s).
Processed 256 object(s).
Processed 257 object(s).
Processed 258 object(s).
Processed 259 object(s).
Processed 260 object(s).
Processed 261 object(s).
Processed 262 object(s).
Processed 263 object(s).
Processed 264 object(s).
Processed 265 object(s).
Processed 266 object(s).
Processed 267 object(s).
Processed 268 object(s).
Processed 269 object(s).
Processed 270 object(s).
Processed 271 object(s).
Processed 272 object(s).
Processed 273 object(s).
Processed 274 object(s).
Processed 275 object(s).
Processed 276 object(s).
Processed 277 object(s).
Processed 278 object(s).
Processed 279 object(s).
Processed 280 object(s).
Processed 281 object(s).
Processed 282 object(s).
Processed 283 object(s).
Processed 284 object(s).
Processed 285 object(s).
Processed 286 object(s).
Processed 287 object(s).
Processed 288 object(s).
Processed 289 object(s).
Processed 290 object(s).
Processed 291 object(s).
Processed 292 object(s).
Processed 293 object(s).
Processed 294 object(s).
Processed 295 object(s).
Processed 296 object(s).
Processed 297 object(s).
Processed 298 object(s).
Processed 299 object(s).
Processed 300 object(s).
Processed 301 object(s).
Processed 302 object(s).
Processed 303 object(s).
Processed 304 object(s).
Processed 305 object(s).
Processed 306 object(s).
Processed 307 object(s).
Processed 308 object(s).
Processed 309 object(s).
Processed 310 object(s).
Processed 311 object(s).
Processed 312 object(s).
Processed 313 object(s).
Processed 314 object(s).
Processed 315 object(s).
Processed 316 object(s).
Processed 317 object(s).
Processed 318 object(s).
Processed 319 object(s).
Processed 320 object(s).
Processed 321 object(s).
Processed 322 object(s).
Processed 323 object(s).
Processed 324 object(s).
Processed 325 object(s).
Processed 326 object(s).
Processed 327 object(s).
Processed 328 object(s).
Processed 329 object(s).
Processed 330 object(s).
Processed 331 object(s).
Processed 332 object(s).
Processed 333 object(s).
Processed 334 object(s).
Processed 335 object(s).
Processed 336 object(s).
Processed 337 object(s).
Processed 338 object(s).
Processed 339 object(s).
Processed 340 object(s).
Processed 341 object(s).
Processed 342 object(s).
Processed 343 object(s).
Processed 344 object(s).
Processed 345 object(s).
Processed 346 object(s).
Processed 347 object(s).
Processed 348 object(s).
Processed 349 object(s).
Processed 350 object(s).
Processed 351 object(s).
Processed 352 object(s).
Resetting sequences
Installed 352 object(s) from 1 fixture(s)
________________________________ test_add_pow _________________________________

lastname = 'ducournau', firstname = 'julia', nb_films = 3, refresh_delay = 3

    @pytest.mark.django_db
    def test_add_pow(lastname="ducournau",firstname="julia",nb_films=3,refresh_delay=3):
    	query=Profil.objects.filter(name_index=index_string(firstname+lastname))
    	assert query.count()>0
    	rc=test_extract_profil(lastname,firstname,refresh_delay=refresh_delay)
    	rc=add_pows_to_profil(query.first(),rc["links"],"",refresh_delay)
    	assert not rc is None
>   	assert rc[0]==nb_films
E    assert 0 == 3

test_query.py:47: AssertionError
---------------------------- Captured stdout setup ----------------------------
2:2 : Traitement de Charles Autrand. Derni√ûre recherche 2023-01-10 17:32:50.990294+00:00
2:2 : Autrand est d√öj√ì √ì jour
2:2 : Traitement de Hubert Charuel. Derni√ûre recherche 2023-01-10 17:36:49.064715+00:00
2:2 : Charuel est d√öj√ì √ì jour
2:2 : Traitement de Julia Ducournau. Derni√ûre recherche 2023-01-10 17:37:26.624572+00:00
2:2 : Ducournau est d√öj√ì √ì jour
2:2 : Traitement de Mike Fromentin. Derni√ûre recherche 2023-01-10 17:37:50.818851+00:00
2:2 : Fromentin est d√öj√ì √ì jour
2:2 : Traitement de Julien Leloup. Derni√ûre recherche 2023-01-10 17:38:30.605268+00:00
2:2 : Leloup est d√öj√ì √ì jour
2:2 : Traitement de Rafael Lewandowski. Derni√ûre recherche 2023-01-10 17:39:18.312673+00:00
2:2 : Lewandowski est d√öj√ì √ì jour
2:2 : Traitement de Francisco Lopez Ballo. Derni√ûre recherche 2023-01-10 17:39:32.322659+00:00
2:2 : Lopez Ballo est d√öj√ì √ì jour
2:2 : R√ö-indexage de la base
Deleting index 'profils'
Deleting index 'pows'
Creating index 'profils'
Creating index 'pows'
Indexing 91 'PieceOfWork' objects 
Indexing 7 'Profil' objects 
---------------------------- Captured stdout call -----------------------------
2:23 : Utilisation du fichier cache 79d2627887a1c3e873c5c22709c870ff321777959e57cbd483f03561.html pour https://www.imdb.com/find/?s=nm&q=julia%20ducournau&ref_=nv_sr_sm
2:23 : Compression de 0.0%
2:23 : Ouverture de https://imdb.com/name/nm4469445/
2:23 : Utilisation du fichier cache 6db930028f4983123dd4ec6462483702ba2926c91a7ba1cde9fb842b.html pour https://imdb.com/name/nm4469445/
2:23 : Compression de 0.0%
2:23 : Utilisation du fichier cache d3e9dbc6ba2a61e03c752204b23c45fd3708810021a913e3217e55ae.html pour https://www.unifrance.org/recherche/personne?q=julia%20ducournau&sort=pertinence
2:23 : Compression de 0.0%
2:25 : Utilisation du fichier cache b6c0f72ccf3b58eb143e29fb28ca61fbac67143da4ade201f1b4e5cd.html pour https://www.unifrance.org/film/51802/titane
2:25 : Compression de 0.0%
2:25 : Analyse du film Titane
2:25 : Enregistrement de l'affiche https://medias.unifrance.org/medias/114/154/236146/format_web/titane.jpg
2:25 : Ajout du prix {'desc': 'Prix du Meilleur Maquillage et de la Meilleure Coiffure', 'title': 'European Film Awards ', 'year': '2021'}
2:25 : Ajout du prix {'desc': 'People√Üs Choice Midnight Madness Award', 'title': 'TIFF ', 'year': '2021'}
2:25 : Ajout du prix {'desc': 'Palme d√Üor', 'title': 'Festival international du film de Cannes ', 'year': '2021'}
2:25 : Utilisation du fichier cache b6c0f72ccf3b58eb143e29fb28ca61fbac67143da4ade201f1b4e5cd.html pour https://www.unifrance.org/film/51802/titane
2:25 : Compression de 0.0%
2:25 : Traitement de Titane √ì l'adresse https://www.unifrance.org/film/51802/titane
2:25 : Le film existe d√öj√ì dans la base, on le met a jour avec les nouvelles donn√öes
2:27 : Utilisation du fichier cache 1b0ef073b47f978e2f5c306e4b3bad8175775c770a3876c979a9e3fc.html pour https://www.unifrance.org/film/41474/grave
2:27 : Compression de 0.0%
2:27 : Analyse du film Grave
2:27 : Enregistrement de l'affiche https://medias.unifrance.org/medias/49/153/170289/format_web/grave.jpg
2:27 : Ajout du prix {'desc': 'Prix Louis-Delluc du Premier Film', 'title': 'Prix Louis-Delluc ', 'year': '2017'}
2:27 : Ajout du prix {'desc': 'Sutherland Award - meilleur 1er film', 'title': 'Festival BFI du film de Londres ', 'year': '2016'}
2:27 : Ajout du prix {'desc': 'Prix FIPRESCI/Semaine de la Critique', 'title': 'Semaine de la Critique - Cannes ', 'year': '2016'}
2:27 : Utilisation du fichier cache 1b0ef073b47f978e2f5c306e4b3bad8175775c770a3876c979a9e3fc.html pour https://www.unifrance.org/film/41474/grave
2:27 : Compression de 0.0%
2:27 : Traitement de Grave √ì l'adresse https://www.unifrance.org/film/41474/grave
2:27 : Le film existe d√öj√ì dans la base, on le met a jour avec les nouvelles donn√öes
2:29 : Utilisation du fichier cache dc837808fe147cb8325ca4d36e649db1296049f0c611428026778b8f.html pour https://www.unifrance.org/film/32736/junior
2:29 : Compression de 0.0%
2:29 : Analyse du film Junior
2:29 : Enregistrement de l'affiche https://medias.unifrance.org/medias/128/223/57216/format_page/media.jpg
2:29 : Ajout du prix {'desc': 'Mention sp√öciale du jury comp√ötition internationale', 'title': 'Brussels Short Film Festival ', 'year': '2012'}
2:29 : Ajout du prix {'desc': 'Prix du jury jeune', 'title': "Festival international du court-m√ötrage d'Oberhausen  ", 'year': '2012'}
2:29 : Utilisation du fichier cache dc837808fe147cb8325ca4d36e649db1296049f0c611428026778b8f.html pour https://www.unifrance.org/film/32736/junior
2:29 : Compression de 0.0%
2:29 : Mixage non pr√ösent dans le r√öf√örentiel
2:29 : Traitement de Junior √ì l'adresse https://www.unifrance.org/film/32736/junior
2:29 : Le film existe d√öj√ì dans la base, on le met a jour avec les nouvelles donn√öes
_________________________________ test_query __________________________________

db = None, server = <rest_framework.test.APIClient object at 0x000001CD3BF9DEE0>
queries = ['search=montage', 'search=Fromentin', 'firstname=Julien', 'promo=1995', 'firstname__contains=Jul']

    @pytest.mark.django_db
    def test_query(db,server,queries=["search=montage","search=Fromentin","firstname=Julien","promo=1995","firstname__contains=Jul"]):
    	"""
    	conception des requetes voir
    	:param db:
    	:param server:
    	:param queries:
    	:return:
    	"""
    	max_responses=Profil.objects.count()
    	for query in queries:
    		log("Execution de la requete "+query)
    		rc=call_api(server,"profilsdoc",query)
>   		assert rc["count"]>0,"R√öponse vide anormale"
E     AssertionError: R√öponse vide anormale
E     assert 0 > 0

test_query.py:83: AssertionError
---------------------------- Captured stdout call -----------------------------
2:31 : Execution de la requete search=montage
2:31 : Execution de la requete search=Fromentin
2:31 : Execution de la requete firstname=Julien
_________________________________ test_movies _________________________________

pows = ['Plus belle la vie', 'titane']

    def test_movies(pows=["Plus belle la vie","titane"]):
    	for pow in pows:
>   		rc=test_extract_movies(pow,refresh_delay=3)

test_scrapping.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

title = 'Plus belle la vie', url = '', refresh_delay = 3
sources = ['unifrance', 'imdb']

    def test_extract_movies(title="titane",url="",refresh_delay=3,sources=["unifrance","imdb"]):
    	for src in sources:
    		if src=="imdb":	rc=extract_film_from_imdb(url=url,title=title,refresh_delay=refresh_delay)
    		if src=="unifrance": rc=extract_film_from_unifrance(url=url,title=title,refresh_delay=refresh_delay)
    
>   		assert equal_str(rc["title"],title)
E     AssertionError: assert False
E      +  where False = equal_str('La Vie de Michel Muller est plus belle que la v¬∂tre', 'Plus belle la vie')

test_scrapping.py:46: AssertionError
---------------------------- Captured stdout call -----------------------------
3:1 : On passe par la page de recherche pour retrouver le titre
3:1 : Utilisation du fichier cache 5d636e5b33ce9cff8d7a1cd20ac3b6d169a2371ea063e36eb0c00b11.html pour https://unifrance.org/recherche?q=Plus%20belle%20la%20vie
3:1 : Compression de 0.0%
3:1 : Utilisation du fichier cache 30ee4d53aaaecf4935901cca8a867e09d3cfc4196fdc6ecda5740021.html pour https://www.unifrance.org/film/25672/la-vie-de-michel-muller-est-plus-belle-que-la-votre
3:1 : Compression de 0.0%
3:1 : Analyse du film La Vie de Michel Muller est plus belle que la v¬∂tre
3:1 : Enregistrement de l'affiche https://medias.unifrance.org/medias/173/5/1453/format_page/media.jpg
3:1 : Utilisation du fichier cache 30ee4d53aaaecf4935901cca8a867e09d3cfc4196fdc6ecda5740021.html pour https://www.unifrance.org/film/25672/la-vie-de-michel-muller-est-plus-belle-que-la-votre
3:1 : Compression de 0.0%
3:1 : Mixage non pr√ösent dans le r√öf√örentiel
============================== warnings summary ===============================
..\..\..\..\..\Program Files\Python39\lib\site-packages\django\conf\__init__.py:229
  C:\Program Files\Python39\lib\site-packages\django\conf\__init__.py:229: RemovedInDjango50Warning: The USE_L10N setting is deprecated. Starting with Django 5.0, localized formatting of data will always be enabled. For example Django will display numbers and dates using the format of the current locale.
    warnings.warn(USE_L10N_DEPRECATED_MSG, RemovedInDjango50Warning)

..\..\..\AppData\Roaming\Python\Python39\site-packages\django_nine\versions.py:19
  C:\Users\hhoar\AppData\Roaming\Python\Python39\site-packages\django_nine\versions.py:19: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    LOOSE_DJANGO_VERSION = LooseVersion(django.get_version())

..\..\..\AppData\Roaming\Python\Python39\site-packages\django_nine\versions.py:20
  C:\Users\hhoar\AppData\Roaming\Python\Python39\site-packages\django_nine\versions.py:20: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    LOOSE_DJANGO_MINOR_VERSION = LooseVersion(

..\..\..\AppData\Roaming\Python\Python39\site-packages\django_nine\versions.py:53: 23 warnings
  C:\Users\hhoar\AppData\Roaming\Python\Python39\site-packages\django_nine\versions.py:53: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    globals()[var_name] = LooseVersion(v)

..\..\..\..\..\Program Files\Python39\lib\site-packages\django_elasticsearch_dsl_drf\versions.py:35
  C:\Program Files\Python39\lib\site-packages\django_elasticsearch_dsl_drf\versions.py:35: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    LOOSE_ELASTICSEARCH_VERSION = LooseVersion(

..\..\..\..\..\Program Files\Python39\lib\site-packages\django_elasticsearch_dsl_drf\versions.py:38
  C:\Program Files\Python39\lib\site-packages\django_elasticsearch_dsl_drf\versions.py:38: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    LOOSE_ELASTICSEARCH_MINOR_VERSION = LooseVersion(

..\..\..\..\..\Program Files\Python39\lib\site-packages\django_elasticsearch_dsl_drf\versions.py:67: 19 warnings
  C:\Program Files\Python39\lib\site-packages\django_elasticsearch_dsl_drf\versions.py:67: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    globals()[__var_name] = LooseVersion(__v)

..\OpenAlumni\Batch.py:15
  C:\Users\hhoar\PycharmProjects\OpenAlumni\OpenAlumni\Batch.py:15: RemovedInDjango50Warning: The django.utils.datetime_safe module is deprecated.
    from django.utils.datetime_safe import datetime

..\..\..\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\__init__.py:10
  C:\Users\hhoar\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\__init__.py:10: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    _nlv = LooseVersion(_np_version)

..\..\..\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\__init__.py:11
  C:\Users\hhoar\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\__init__.py:11: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    np_version_under1p17 = _nlv < LooseVersion("1.17")

..\..\..\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\__init__.py:12
  C:\Users\hhoar\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\__init__.py:12: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    np_version_under1p18 = _nlv < LooseVersion("1.18")

..\..\..\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\__init__.py:13
  C:\Users\hhoar\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\__init__.py:13: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    _np_version_under1p19 = _nlv < LooseVersion("1.19")

..\..\..\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\__init__.py:14
  C:\Users\hhoar\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\__init__.py:14: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    _np_version_under1p20 = _nlv < LooseVersion("1.20")

..\..\..\..\..\Program Files\Python39\lib\site-packages\setuptools\_distutils\version.py:351
  C:\Program Files\Python39\lib\site-packages\setuptools\_distutils\version.py:351: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    other = LooseVersion(other)

..\..\..\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\function.py:120
..\..\..\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\function.py:120
  C:\Users\hhoar\AppData\Roaming\Python\Python39\site-packages\pandas\compat\numpy\function.py:120: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    if LooseVersion(__version__) >= LooseVersion("1.17.0"):

test_api.py::test_search
  C:\Users\hhoar\AppData\Roaming\Python\Python39\site-packages\rest_framework\pagination.py:200: UnorderedObjectListWarning: Pagination may yield inconsistent results with an unordered object_list: <class 'alumni.models.PieceOfWork'> QuerySet.
    paginator = self.django_paginator_class(queryset, page_size)

test_query.py::test_add_pow
test_query.py::test_add_pow
  C:\Users\hhoar\AppData\Roaming\Python\Python39\site-packages\elasticsearch_dsl\index.py:279: DeprecationWarning: The 'body' parameter is deprecated for the 'create' API and will be removed in a future version. Instead use API parameters directly. See https://github.com/elastic/elasticsearch-py/issues/1698 for more information
    return self._get_connection(using).indices.create(

test_query.py::test_add_pow
test_query.py::test_extract_profil
test_scrapping.py::test_search_imdb
test_scrapping.py::test_extract_profil
test_scrapping.py::test_extract_awards
test_scrapping.py::test_extract_movies
test_scrapping.py::test_profils
test_scrapping.py::test_movies
  C:\Users\hhoar\PycharmProjects\OpenAlumni\OpenAlumni\Tools.py:613: GuessedAtParserWarning: No parser was explicitly specified, so I'm using the best available HTML parser for this system ("lxml"). This usually isn't a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.
  
  The code that caused this warning is on line 613 of the file C:\Users\hhoar\PycharmProjects\OpenAlumni\OpenAlumni\Tools.py. To get rid of this warning, pass the additional argument 'features="lxml"' to the BeautifulSoup constructor.
  
    page=wikipedia.BeautifulSoup(html)

test_query.py::test_add_pow
  C:\Program Files\Python39\lib\site-packages\django\db\models\fields\__init__.py:1534: RuntimeWarning: DateTimeField PieceOfWork.dtLastSearch received a naive datetime (2023-01-10 19:51:53.357705) while time zone support is active.
    warnings.warn(

test_query.py::test_add_pow
  C:\Program Files\Python39\lib\site-packages\django\db\models\fields\__init__.py:1534: RuntimeWarning: DateTimeField PieceOfWork.dtLastSearch received a naive datetime (2023-01-10 19:51:55.318269) while time zone support is active.
    warnings.warn(

test_query.py::test_add_pow
  C:\Program Files\Python39\lib\site-packages\django\db\models\fields\__init__.py:1534: RuntimeWarning: DateTimeField PieceOfWork.dtLastSearch received a naive datetime (2023-01-10 19:51:57.327033) while time zone support is active.
    warnings.warn(

test_query.py::test_get_profils
  C:\Program Files\Python39\lib\site-packages\_pytest\python.py:199: PytestReturnNotNoneWarning: Expected None, but test_query.py::test_get_profils returned [<Profil: {'id':422,'email':'charlesautrand@free.fr','fullname':'Charles AUTRAND','address':'  ','promo':1995}>, <Profil: {'id':425,'email':'hubert.charuel@gmail.com','fullname':'Hubert CHARUEL','address':'5, Rue Ordener 75018 PARIS','promo':2011}>, <Profil: {'id':424,'email':'julia.ducournau@gmail.com','fullname':'Julia DUCOURNAU','address':'  Paris','promo':2008}>, <Profil: {'id':426,'email':'mikefromentin@gmail.com','fullname':'Mike FROMENTIN','address':'100 AVENUE DU GENERAL MICHEL BIZOT 75012 Paris','promo':1997}>, <Profil: {'id':420,'email':'julien.leloup@free.fr','fullname':'Julien LELOUP','address':'36 rue du Chateau d'Eau 75010 Paris','promo':1998}>, <Profil: {'id':421,'email':'contact@raflewand.com','fullname':'Rafael LEWANDOWSKI','address':'ul. Sobolewska 16 02-90 Varsovie','promo':1995}>, <Profil: {'id':423,'email':'juanballo@gmail.com','fullname':'Francisco LOPEZ BALLO','address':'7 rue du Mont Louis 75011 Paris','promo':2002}>], which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

test_query.py::test_query
test_query.py::test_query
test_query.py::test_query
  C:\Users\hhoar\AppData\Roaming\Python\Python39\site-packages\elasticsearch_dsl\search.py:715: DeprecationWarning: The 'body' parameter is deprecated for the 'search' API and will be removed in a future version. Instead use API parameters directly. See https://github.com/elastic/elasticsearch-py/issues/1698 for more information
    self, es.search(index=self._index, body=self.to_dict(), **self._params)

test_query.py::test_extract_profil
  C:\Program Files\Python39\lib\site-packages\_pytest\python.py:199: PytestReturnNotNoneWarning: Expected None, but test_query.py::test_extract_profil returned {'links': [{'url': 'https://www.unifrance.org/film/51802/titane', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/41474/grave', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/32736/junior', 'text': None, 'nature': ''}], 'photo': 'https://medias.unifrance.org/medias/28/145/168220/format_page/julia-ducournau.jpg', 'url': 'https://www.unifrance.org/annuaires/personne/369413/julia-ducournau', 'fullname': 'julia ducournau'}, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

test_scrapping.py::test_search_imdb
  C:\Program Files\Python39\lib\site-packages\_pytest\python.py:199: PytestReturnNotNoneWarning: Expected None, but test_scrapping.py::test_search_imdb returned {'name': 'Herv√ö Hadmar', 'href': '/name/nm0352924/'}, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

test_scrapping.py::test_extract_profil
  C:\Program Files\Python39\lib\site-packages\_pytest\python.py:199: PytestReturnNotNoneWarning: Expected None, but test_scrapping.py::test_extract_profil returned {'links': [{'url': 'https://www.unifrance.org/film/51802/titane', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/41474/grave', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/32736/junior', 'text': None, 'nature': ''}], 'photo': 'https://medias.unifrance.org/medias/28/145/168220/format_page/julia-ducournau.jpg', 'url': 'https://www.unifrance.org/annuaires/personne/369413/julia-ducournau', 'fullname': 'julia ducournau'}, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

test_scrapping.py::test_extract_awards
  C:\Program Files\Python39\lib\site-packages\_pytest\python.py:199: PytestReturnNotNoneWarning: Expected None, but test_scrapping.py::test_extract_awards returned [{'festival_title': 'Bafta awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Director', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Alliance of women film journalists', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Woman Director', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Austin fantastic fest', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Next Wave Features', 'film_title': 'Grave', 'year': '2016', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Bodil awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Non-American Film (Bedste ikke-amerikanske film)', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Camerimage', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': "Directors' Debuts Competition", 'film_title': 'Titane', 'year': '2021', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Cannes film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Titane (2021)', 'film_title': 'Titane', 'year': '2021', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Cannes film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': "Directors' Fortnight or Critics' Week", 'film_title': 'Grave', 'year': '2016', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Cannes film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Junior (2011)', 'film_title': 'Junior', 'year': '2011', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Chicago film critics association awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Most Promising Filmmaker', 'film_title': 'Grave', 'year': '2017', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Columbus film critics association', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Original Screenplay', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Cph pix', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Grave (2016)', 'film_title': 'Grave', 'year': '2016', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'C√ösar awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Director (Meilleure r√öalisation)', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'C√ösar awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Original Screenplay (Meilleur sc√önario original)', 'film_title': 'Grave', 'year': '2018', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Discussingfilm critics awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Director', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Dublin film critics circle awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Director', 'film_title': 'Grave', 'year': '2017', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'European film awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'European Film', 'film_title': 'Titane', 'year': '2021', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Fangoria chainsaw awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Director', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Faro island film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Film', 'film_title': 'Grave', 'year': '2016', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Festival international du film ind√öpendant de bordeaux fifib', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Raw (2016)', 'film_title': 'Raw', 'year': '2016', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Film by the sea international film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Film', 'film_title': 'Titane', 'year': '2021', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'French syndicate of cinema critics', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best First Film', 'film_title': 'Grave', 'year': '2018', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Galeca the society of lgbtq entertainment critics', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Director of the Year', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Gaud√ù awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best European Film (Millor Pel√Äl√ùcula Europea)', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Georgia film critics association gafca', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Original Screenplay', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Ghent international film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Grave (2016)', 'film_title': 'Grave', 'year': '2016', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Gold derby awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Director', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Gotham awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best International Feature', 'film_title': 'Titane', 'year': '2021', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Greater western new york film critics association awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Original Screenplay', 'film_title': 'Titane', 'year': '2021', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Hardline film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Film', 'film_title': 'Grave', 'year': '2017', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'International online cinema awards inoca', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Non-English Language Film', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'International online cinema awards inoca', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Non-English Language Film', 'film_title': 'Grave', 'year': '2018', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'International online cinema awards inoca', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Non-English Language Film', 'film_title': 'Grave', 'year': '2017', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Jerusalem film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'The Nechama Rivilin Award for Best International Film', 'film_title': 'Titane', 'year': '2021', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'London film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'First Feature Competition', 'film_title': 'Grave', 'year': '2016', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Lumiere awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best First Film (Meilleur premier film)', 'film_title': 'Grave', 'year': '2018', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Luxembourg city film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Dark Night (2016)', 'film_title': 'Dark Night', 'year': '2017', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Magritte awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Foreign Film in Co-Production (Meilleur film √ötranger en coproduction)', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Magritte awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Foreign Film in Co-Production (Meilleur film √ötranger en coproduction)', 'film_title': 'Grave', 'year': '2018', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Monster fest', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Grave (2016)', 'film_title': 'Grave', 'year': '2016', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Neuch√îtel international fantastic film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best European Fantastic Feature Film', 'film_title': 'Grave', 'year': '2016', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'North dakota film society', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best International Feature', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Online association of female film critics', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Original Screenplay', 'film_title': 'Titane', 'year': '2021', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Online film & television association', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Director', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Palm springs international film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Foreign Language Film', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Palm springs international film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Grave (2016)', 'film_title': 'Grave', 'year': '2017', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Polish film awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best European Film (Najlepszy Film Europejski)', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Prix louis delluc', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best First Film', 'film_title': 'Grave', 'year': '2017', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'San sebasti√ün international film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Film', 'film_title': 'Titane', 'year': '2021', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Seattle film critics society', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Director', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Seattle film critics society', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best Foreign Language Film', 'film_title': 'Grave', 'year': '2017', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Sitges - catalonian international film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Grave (2016)', 'film_title': 'Grave', 'year': '2016', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Strasbourg european fantastic film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best International Feature Film', 'film_title': 'Grave', 'year': '2016', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Toronto international film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Midnight Madness', 'film_title': 'Titane', 'year': '2021', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Toronto international film festival', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Midnight Madness', 'film_title': 'Grave', 'year': '2016', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Village voice film poll', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Best First Feature', 'film_title': 'Grave', 'year': '2017', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Women film critics circle awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Titane (2021)', 'film_title': 'Titane', 'year': '2021', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}, {'festival_title': 'Yoga awards', 'profil': 'https://imdb.com/name/nm4469445/', 'desc': 'Worst Foreign Film', 'film_title': 'Titane', 'year': '2022', 'win': False, 'url': 'https://imdb.com/name/nm4469445//awards'}], which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

test_scrapping.py::test_extract_movies
  C:\Program Files\Python39\lib\site-packages\_pytest\python.py:199: PytestReturnNotNoneWarning: Expected None, but test_scrapping.py::test_extract_movies returned {'title': 'titane', 'nature': 'Film', 'casting': {'R√öalisation': [{'name': 'Julia Ducournau', 'source': 'imdb', 'index': 'JULIADUCOURNAU'}, {'name': 'Nina Dor√ö', 'source': 'imdb', 'index': 'NINADORE'}], 'Sc√önario': [{'name': 'Julia Ducournau', 'source': 'imdb', 'index': 'JULIADUCOURNAU'}, {'name': 'Jacques Akchoti', 'source': 'imdb', 'index': 'JACQUESAKCHOTI'}, {'name': 'Simonetta Greggio', 'source': 'imdb', 'index': 'SIMONETTAGREGGIO'}, {'name': 'Jean-Christophe Bouzy', 'source': 'imdb', 'index': 'JEAN CHRISTOPHEBOUZY'}], 'Producteur executif': [{'name': 'Christophe Hollebeke', 'source': 'imdb', 'index': 'CHRISTOPHEHOLLEBEKE'}], 'Production associ√öe': [{'name': 'Philippe Logie', 'source': 'imdb', 'index': 'PHILIPPELOGIE'}], 'Production': [{'name': 'Amaury Ovise', 'source': 'imdb', 'index': 'AMAURYOVISE'}, {'name': 'Olivier P√ûre', 'source': 'imdb', 'index': 'OLIVIERPERE'}, {'name': 'Jean-Christophe Reymond', 'source': 'imdb', 'index': 'JEAN CHRISTOPHEREYMOND'}, {'name': 'Jean-Yves Roubin', 'source': 'imdb', 'index': 'JEAN YVESROUBIN'}, {'name': 'Cassandre Warnauts', 'source': 'imdb', 'index': 'CASSANDREWARNAUTS'}, {'name': 'Jean-Christophe Bouzy', 'source': 'imdb', 'index': 'JEAN CHRISTOPHEBOUZY'}, {'name': 'Tatiana Bouchain', 'source': 'imdb', 'index': 'TATIANABOUCHAIN'}, {'name': 'Christina Crassaris', 'source': 'imdb', 'index': 'CHRISTINACRASSARIS'}, {'name': 'Sidonie Waserman', 'source': 'imdb', 'index': 'SIDONIEWASERMAN'}, {'name': 'Delphine Gozzo', 'source': 'imdb', 'index': 'DELPHINEGOZZO'}, {'name': 'Mathieu Pereira', 'source': 'imdb', 'index': 'MATHIEUPEREIRA'}], 'Ing. son': [{'name': 'S√överin Favriau', 'source': 'imdb', 'index': 'SEVERINFAVRIAU'}, {'name': 'Fabrice Osinski', 'source': 'imdb', 'index': 'FABRICEOSINSKI'}, {'name': 'St√öphane Thi√öbaut', 'source': 'imdb', 'index': 'STEPHANETHIEBAUT'}, {'name': 'Fabrice Osinski', 'source': 'imdb', 'index': 'FABRICEOSINSKI'}, {'name': 'St√öphane Thi√öbaut', 'source': 'imdb', 'index': 'STEPHANETHIEBAUT'}], 'Direction photo': [{'name': 'Ruben Impens', 'source': 'imdb', 'index': 'RUBENIMPENS'}], 'Casting': [{'name': 'Doroth√öe Auboiron', 'source': 'imdb', 'index': 'DOROTHEEAUBOIRON'}, {'name': 'Christel Baras', 'source': 'imdb', 'index': 'CHRISTELBARAS'}, {'name': 'Doroth√öe Auboiron', 'source': 'imdb', 'index': 'DOROTHEEAUBOIRON'}], 'Maquillage': [{'name': 'Olivier Afonso', 'source': 'imdb', 'index': 'OLIVIERAFONSO'}, {'name': 'Marison De', 'source': 'imdb', 'index': 'MARISONDE'}, {'name': 'Antoine Delannoy', 'source': 'imdb', 'index': 'ANTOINEDELANNOY'}, {'name': 'Amelie Grossier', 'source': 'imdb', 'index': 'AMELIEGROSSIER'}, {'name': 'Pierre Emmanuel Kass', 'source': 'imdb', 'index': 'PIERREEMMANUELKASS'}, {'name': 'C√öline Llerena', 'source': 'imdb', 'index': 'CELINELLERENA'}, {'name': 'Antoine Mancini', 'source': 'imdb', 'index': 'ANTOINEMANCINI'}], 'Ass. production': [{'name': 'C√ödric Hou√ö', 'source': 'imdb', 'index': 'CEDRICHOUE'}], 'Ass. r√öalisation': [{'name': 'Claire Corbetta-Doll', 'source': 'imdb', 'index': 'CLAIRECORBETTA DOLL'}, {'name': 'Jacques Kounta', 'source': 'imdb', 'index': 'JACQUESKOUNTA'}, {'name': 'Pierre Lagard√ûre', 'source': 'imdb', 'index': 'PIERRELAGARDERE'}], 'D√öcor': [{'name': 'Aurore Benoit', 'source': 'imdb', 'index': 'AUROREBENOIT'}, {'name': 'Louis Duru', 'source': 'imdb', 'index': 'LOUISDURU'}, {'name': 'Alexis Baillia', 'source': 'imdb', 'index': 'ALEXISBAILLIA'}, {'name': 'Mathilde Germi', 'source': 'imdb', 'index': 'MATHILDEGERMI'}, {'name': 'Cedric Lenepveu', 'source': 'imdb', 'index': 'CEDRICLENEPVEU'}, {'name': 'Olivier Veau', 'source': 'imdb', 'index': 'OLIVIERVEAU'}], 'Assistant son': [{'name': 'Thomas Berliner', 'source': 'imdb', 'index': 'THOMASBERLINER'}, {'name': 'C√öline Bernard', 'source': 'imdb', 'index': 'CELINEBERNARD'}], 'Son': [{'name': 'No√ômy Oraison', 'source': 'imdb', 'index': 'NOEMYORAISON'}, {'name': 'Victor Praud', 'source': 'imdb', 'index': 'VICTORPRAUD'}], 'Electricien': [{'name': 'Camille B√önariac', 'source': 'imdb', 'index': 'CAMILLEBENARIAC'}, {'name': 'Coline Genet', 'source': 'imdb', 'index': 'COLINEGENET'}, {'name': 'Cl√öment Jacquet', 'source': 'imdb', 'index': 'CLEMENTJACQUET'}], 'Assistant cam√öra': [{'name': 'Thomas Hauser', 'source': 'imdb', 'index': 'THOMASHAUSER'}, {'name': 'Lucien Jacquelin', 'source': 'imdb', 'index': 'LUCIENJACQUELIN'}], 'Post-production': [{'name': 'Peter Bernaers', 'source': 'imdb', 'index': 'PETERBERNAERS'}], 'Ass. montage': [{'name': 'Ana¬¥s Berthier', 'source': 'imdb', 'index': 'ANAISBERTHIER'}, {'name': 'Cl√ömence Lucas', 'source': 'imdb', 'index': 'CLEMENCELUCAS'}], 'Scripte': [{'name': 'B√ön√ödicte Kermadec', 'source': 'imdb', 'index': 'BENEDICTEKERMADEC'}], 'Participation': [{'name': 'Sabila Attal', 'source': 'imdb', 'index': 'SABILAATTAL'}, {'name': 'Ana¬¥s Fabre', 'source': 'imdb', 'index': 'ANAISFABRE'}, {'name': 'Thibault Fauchon', 'source': 'imdb', 'index': 'THIBAULTFAUCHON'}, {'name': 'Sidy Faye', 'source': 'imdb', 'index': 'SIDYFAYE'}, {'name': 'El Hadji Samba Sarr', 'source': 'imdb', 'index': 'ELHADJISAMBASARR'}, {'name': 'Christophe Soubielle', 'source': 'imdb', 'index': 'CHRISTOPHESOUBIELLE'}], 'Remerciements': [{'name': 'Jacques Audiard', 'source': 'imdb', 'index': 'JACQUESAUDIARD'}, {'name': 'Thomas Bidegain', 'source': 'imdb', 'index': 'THOMASBIDEGAIN'}, {'name': 'Jean des For√õts', 'source': 'imdb', 'index': 'JEANDESFORETS'}, {'name': 'Thomas Jaubert', 'source': 'imdb', 'index': 'THOMASJAUBERT'}]}, 'url': 'https://www.imdb.com/title/tt10944760/?ref_=fn_tt_tt_1', 'source': 'auto:IMDB', 'episodes': [], 'year': ['2021'], 'lang': 'Fran√æais', 'production': 'Production companies,Kazak Productions,Frakas Productions,Arte France Cin√öma', 'category': 'Dramahorrorsci-fi', 'visual': 'https://m.media-amazon.com/images/M/MV5BNGJlMTVlYWQtYmM5OC00MDgwLTk3NzAtMGViY2VjOGU0YjlkXkEyXkFqcGdeQXVyMTkxNjUyNQ@@._V1_QL75_UY281_CR8,0,190,281_.jpg', 'synopsis': 'Following a series of unexplained crimes, a father is reunited with the son who has been missing for 10 years.Following a series of unexplained crimes, a father is reunited with the son who has been missing for 10 years.Following a series of unexplained crimes, a father is reunited with the son who has been missing for 10 years.', 'job': ''}, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

test_scrapping.py::test_profils
  C:\Program Files\Python39\lib\site-packages\_pytest\python.py:199: PytestReturnNotNoneWarning: Expected None, but test_scrapping.py::test_profils returned [{'links': [{'url': 'https://www.unifrance.org/film/28520/les-grandes-personnes', 'text': None, 'nature': ''}], 'photo': '', 'url': 'https://www.unifrance.org/annuaires/personne/354828/beatrice-colombier', 'fullname': 'b√öatrice Colombier'}, {'links': [{'url': 'https://www.unifrance.org/film/54923/mon-crime', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/53491/peter-von-kant', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/51842/tout-s-est-bien-passe', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/49381/ete-85', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/45614/grace-a-dieu', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/43390/l-amant-double', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/40863/frantz', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/37608/une-nouvelle-amie', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/34888/jeune-jolie', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/33304/dans-la-maison', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/30941/potiche', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/30482/le-refuge', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/29630/ricky', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/27438/un-lever-de-rideau', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/27032/angel', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/25409/le-temps-qui-reste', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/24173/5x2', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/23557/swimming-pool', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/22304/8-femmes', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/20670/sous-le-sable', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/20581/gouttes-d-eau-sur-pierres-brulantes', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/20723/les-amants-criminels', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/21236/x2000', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/15462/sitcom', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/22721/regarde-la-mer', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/22742/scenes-de-lit-l-homme-ideal', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/22748/scenes-de-lit-le-trou-noir', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/22746/scenes-de-lit-les-puceaux', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/22743/scenes-de-lit-love-in-the-dark', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/22744/scenes-de-lit-madame', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/22745/scenes-de-lit-monsieur-propre', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/22747/scenes-de-lit-tete-beche', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/24392/une-robe-d-ete', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/39159/jospin-s-eclaire', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/22911/la-petite-mort', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/12836/action-verite', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/13055/une-rose-entre-nous', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/13058/victor', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/39155/thomas-reconstitue', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/39157/deux-plus-un', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/39158/le-trou-madame', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/39156/peau-contre-peau', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/39154/une-goutte-de-sang', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/39153/mes-parents-un-jour-d-ete', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/39152/les-doigts-dans-le-ventre', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/39151/photo-de-famille', 'text': None, 'nature': ''}], 'photo': 'https://medias.unifrance.org/medias/218/145/233946/format_page/francois-ozon.jpg', 'url': 'https://www.unifrance.org/annuaires/personne/138737/francois-ozon', 'fullname': 'francois ozon'}, {'links': [{'url': 'https://www.unifrance.org/film/51802/titane', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/41474/grave', 'text': None, 'nature': ''}, {'url': 'https://www.unifrance.org/film/32736/junior', 'text': None, 'nature': ''}], 'photo': 'https://medias.unifrance.org/medias/28/145/168220/format_page/julia-ducournau.jpg', 'url': 'https://www.unifrance.org/annuaires/personne/369413/julia-ducournau', 'fullname': 'julia ducournau'}], which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ===========================
FAILED test_api.py::test_backup - assert 302 == 200
FAILED test_query.py::test_add_pow - assert 0 == 3
FAILED test_query.py::test_query - AssertionError: R√öponse vide anormale
FAILED test_scrapping.py::test_movies - AssertionError: assert False
============ 4 failed, 11 passed, 80 warnings in 181.88s (0:03:01) ============
