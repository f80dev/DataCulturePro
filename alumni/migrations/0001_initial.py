# Generated by Django 3.2 on 2021-05-05 09:01

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PieceOfWork',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('visual', models.TextField(blank=True, help_text="Visuel de l'oeuvre")),
                ('dtStart', models.DateField(auto_now=True, help_text="Date de début de la réalisation de l'oeuvre")),
                ('dtEnd', models.DateField(auto_now=True, help_text="Date de fin de la réalisation de l'oeuvre")),
                ('title', models.CharField(default='sans titre', help_text="Titre de l'oeuvre, même temporaire", max_length=300, unique=True)),
                ('year', models.CharField(help_text='Année de sortie', max_length=4, null=True)),
                ('nature', models.CharField(default='MOVIE', help_text="Classification de l'oeuvre", max_length=20)),
                ('dtCreate', models.DateField(auto_now_add=True, help_text="Date de création de l'oeuvre")),
                ('reference', models.CharField(blank=True, default='', help_text="Reference de l'oeuvre", max_length=50)),
                ('budget', models.IntegerField(default=0, help_text="Coût total de réalisation de l'oeuvre")),
                ('production', models.CharField(blank=True, default='', help_text="Production de l'oeuvre", max_length=100)),
                ('links', models.JSONField(help_text="Liens vers des références externes à l'oeuvre", null=True)),
                ('owner', models.CharField(default='public', help_text="Auteur de l'oeuvre", max_length=150)),
                ('description', models.TextField(default='', help_text="Description/Resumer de l'oeuvre", max_length=3000)),
                ('files', models.JSONField(help_text='Liens vers des documents attaché', null=True)),
                ('category', models.TextField(help_text='Liste des categories auxquelles appartient le film', max_length=200, null=True)),
                ('lang', models.CharField(help_text="Langue originale de l'oeuvre", max_length=50, null=True)),
                ('apiVideoId', models.CharField(blank=True, default='', help_text='Version stocké sur api.video', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Profil',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('firstname', models.CharField(default='', help_text='Prénom du profil', max_length=40)),
                ('lastname', models.CharField(default='', help_text='Nom du profil', max_length=70)),
                ('birthdate', models.DateField(help_text='Date de naissance', null=True)),
                ('mobile', models.CharField(blank=True, default='06', help_text='Numéro de mobile', max_length=20, null=True)),
                ('nationality', models.CharField(blank=True, default='Française', max_length=30)),
                ('department', models.CharField(blank=True, default='', help_text='Cursus suivi pendant les études', max_length=60, null=True)),
                ('job', models.CharField(blank=True, default='', help_text='Profession actuelle', max_length=60, null=True)),
                ('degree_year', models.IntegerField(help_text="Année de sortie de l'école", null=True)),
                ('linkedin', models.URLField(blank=True, help_text='Adresse de la page public linkedin du profil', null=True)),
                ('email', models.EmailField(help_text='email du profil', max_length=254, unique=True)),
                ('instagram', models.URLField(blank=True, help_text='Adresse du compte instagram', null=True)),
                ('telegram', models.URLField(blank=True, help_text='Adresse public du compte telegram', null=True)),
                ('facebook', models.URLField(blank=True, help_text='Adresse de la page facebook du profil', null=True)),
                ('twitter', models.URLField(blank=True, help_text='Adresse de la page twitter du profil', null=True)),
                ('tiktok', models.URLField(blank=True, null=True)),
                ('youtube', models.URLField(blank=True, null=True)),
                ('vimeo', models.URLField(blank=True, null=True)),
                ('acceptSponsor', models.BooleanField(default=False)),
                ('photo', models.TextField(blank=True, help_text='Photo du profil au format Base64')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('A', 'Autre'), ('', 'NSP')], default='M', max_length=1)),
                ('cursus', models.CharField(choices=[('S', 'Standard'), ('P', 'Professionnel')], default='S', help_text='Type de formation', max_length=1)),
                ('address', models.CharField(blank=True, help_text='Adresse postale au format numéro / rue / batiment', max_length=200, null=True)),
                ('town', models.CharField(blank=True, help_text="Ville de l'adresse postale", max_length=50, null=True)),
                ('cp', models.CharField(blank=True, help_text="code postal de l'adresse postale", max_length=5, null=True)),
                ('country', models.CharField(blank=True, help_text='Pays de naissance', max_length=50, null=True)),
                ('website', models.URLField(null=True)),
                ('dtLastUpdate', models.DateTimeField(auto_now=True, help_text='Date de la dernière modification du profil')),
                ('dtLastSearch', models.DateTimeField(auto_now=True, help_text="Date de la dernière recherche d'expérience pour le profil")),
                ('dtLastNotif', models.DateTimeField(auto_now=True, help_text='Date de la dernière notification envoyé')),
                ('obsolescenceScore', models.IntegerField(default=0, help_text="Indique le degré d'obsolescence probable")),
                ('biography', models.TextField(help_text='Biographie du profil', max_length=2000, null=True)),
                ('links', models.JSONField(help_text='Liens vers des références externes au profil', null=True)),
                ('auto_updates', models.CharField(default='0,0,0,0,0,0', help_text='Date de mise a jour', max_length=300)),
                ('advices', models.JSONField(help_text="Liste de conseils alimenter par l'outil pour augmenter le rayonnement d'une personne", null=True)),
                ('sponsorBy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='alumni.profil')),
            ],
            options={
                'ordering': ['lastname'],
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('pieceofwork_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='alumni.pieceofwork')),
                ('duration', models.DurationField(help_text='Durée du film', null=True)),
            ],
            bases=('alumni.pieceofwork',),
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('id', models.AutoField(help_text='Clé primaire interne des projets', primary_key=True, serialize=False)),
                ('status', models.CharField(default='', max_length=200)),
                ('state', models.CharField(default='A', help_text='etat du travail entre A=automatiquement creer,E=editer par le profil, D=supprimé par le profil', max_length=1)),
                ('creator', models.CharField(default='auto', help_text="Désigne qui est le dernier auteur de l'enregistrement dans la base de données", max_length=5)),
                ('public', models.BooleanField(default=True, help_text='Indique si le projet est publique (visible de ceux qui ont les droits) ou privé')),
                ('job', models.CharField(default='', help_text='Rôle dans le projet', max_length=200)),
                ('duration', models.IntegerField(default=0, help_text='Durée du projet en heure')),
                ('comment', models.TextField(blank=True, default='', help_text="Commentaire sur la façon dont s'est passé le projet", max_length=400)),
                ('earning', models.IntegerField(default=None, help_text='Revenu percu brut pour la durée annoncée', null=True)),
                ('source', models.CharField(default='', help_text="source ayant permis d'identifier le projet : imdb, unifrance, bellefaye, manuel", max_length=100)),
                ('validate', models.BooleanField(default=False, help_text="Indique si l'expérience est validé ou pas")),
                ('pow', models.ForeignKey(help_text='oeuvre concerné par le projet', on_delete=django.db.models.deletion.CASCADE, related_name='works', to='alumni.pieceofwork')),
                ('profil', models.ForeignKey(help_text='Profil concerné par le projet', on_delete=django.db.models.deletion.CASCADE, related_name='works', to='alumni.profil')),
            ],
        ),
        migrations.CreateModel(
            name='ExtraUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('perm', models.TextField(blank=True, default='', max_length=500)),
                ('profil_name', models.CharField(blank=True, default='', max_length=50)),
                ('black_list', models.TextField(default='', help_text="Contient l'ensemble des emails ne pouvant contacter la personne")),
                ('level', models.IntegerField(default=0, help_text="Niveau de l'utilisateur")),
                ('ask', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=0), null=True, size=None)),
                ('friends', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=0), null=True, size=None)),
                ('profil', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='alumni.profil')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='extrauser', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('validate', models.BooleanField(default=False, help_text="Une fois à vrai l'article est visible de tous")),
                ('html', models.TextField(blank=True, default='', help_text="Contenu de l'article", max_length=5000)),
                ('dtPublish', models.DateField(help_text="Date de publication de l'article", null=True)),
                ('dtCreate', models.DateField(auto_now=True, help_text="Date de création de l'article")),
                ('tags', models.CharField(default='', max_length=100)),
                ('to_publish', models.BooleanField(default=False, help_text='Demander la publication')),
                ('owner', models.ForeignKey(help_text="Auteur de l'article", on_delete=django.db.models.deletion.CASCADE, related_name='Articles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['dtCreate'],
            },
        ),
    ]
